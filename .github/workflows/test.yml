name: Tests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: self-hosted
    timeout-minutes: 5
    steps:

    - name: Set up Go
      uses: actions/setup-go@v2.1.3
      with:
        go-version: '1.18'
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2.4.0

    - name: Get dependencies
      run: |
        go mod download

    - name: Build
      run: |
        go build -v .

  azuretest:
    name: Acceptance Test on Azure
    needs: build
    runs-on: [ self-hosted, azure ]
    env:
      TF_VAR_RESOURCES_DIR: ${{ secrets.TF_VAR_RESOURCES_DIR }}
      YB_CUSTOMER_PASSWORD: ${{ secrets.YB_CUSTOMER_PASSWORD }}
      AZURE_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      AZURE_RG: ${{ secrets.ARM_RESOURCE_GROUP }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        terraform:
          # add other versions to support
          - '1.1.*'

    steps:
      - name: Set up Go
        uses: actions/setup-go@v2.1.3
        with:
          go-version: '1.18'
        id: go

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Get dependencies
        run: |
          go mod download

      - name: Make terraform provider installation directory
        run: mkdir -p ./acctest/azure/terraform.d/plugins/terraform.yugabyte.com/platform/yugabyte-platform/0.1.0/linux_amd64

      - name: Install
        run: |
          go build -o ./acctest/azure/terraform.d/plugins/terraform.yugabyte.com/platform/yugabyte-platform/0.1.0/linux_amd64

      # use the modules to bring up platform instance for acceptance tests
      - name: Terraform Init
        run: terraform init
        working-directory: ./acctest/azure

      - name: Terraform Plan
        run: terraform plan -no-color
        working-directory: ./acctest/azure

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./acctest/azure

      - name: Set platform host
        run: echo "YB_HOST=$(terraform output --raw host)" >> $GITHUB_ENV
        working-directory: ./acctest/azure

      - name: Set platform api key
        run: echo "YB_API_KEY=$(terraform output --raw api_key)" >> $GITHUB_ENV
        working-directory: ./acctest/azure
      # run acceptance tests
      - name: TF acceptance tests
        timeout-minutes: 120
        env:
          TF_ACC: "1"

        run: |
          go test -v -cover -timeout 2h ./... -run "Azure"

      # clean up platform instance
      - name: Terraform Destroy
        if: always()
        run: terraform destroy -auto-approve
        working-directory: ./acctest/azure

  awstest:
    name: Acceptance Test on AWS
    needs: build
    runs-on: [self-hosted, aws]
    env:
      TF_VAR_RESOURCES_DIR: ${{ secrets.TF_VAR_RESOURCES_DIR }}
      YB_CUSTOMER_PASSWORD: ${{ secrets.YB_CUSTOMER_PASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        terraform:
          # add other versions to support
          - '1.1.*'

    steps:
      - name: Set up Go
        uses: actions/setup-go@v2.1.3
        with:
          go-version: '1.18'
        id: go

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Get dependencies
        run: |
          go mod download

      - name: Make terraform provider installation directory
        run: mkdir -p ./acctest/aws/terraform.d/plugins/terraform.yugabyte.com/platform/yugabyte-platform/0.1.0/linux_amd64

      - name: Install
        run: |
          go build -o ./acctest/aws/terraform.d/plugins/terraform.yugabyte.com/platform/yugabyte-platform/0.1.0/linux_amd64

      # use the modules to bring up platform instance for acceptance tests
      - name: Terraform Init
        run: terraform init
        working-directory: ./acctest/aws

      - name: Terraform Plan
        run: terraform plan -no-color
        working-directory: ./acctest/aws

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./acctest/aws

      - name: Set platform host
        run: echo "YB_HOST=$(terraform output --raw host)" >> $GITHUB_ENV
        working-directory: ./acctest/aws

      - name: Set platform api key
        run: echo "YB_API_KEY=$(terraform output --raw api_key)" >> $GITHUB_ENV
        working-directory: ./acctest/aws
      # run acceptance tests
      - name: TF acceptance tests
        timeout-minutes: 120
        env:
          TF_ACC: "1"

        run: |
          go test -v -cover -timeout 2h ./... -run "AWS"

      # clean up platform instance
      - name: Terraform Destroy
        if: always()
        run: terraform destroy -auto-approve
        working-directory: ./acctest/aws
          
  gcptest:
    name: Acceptance Test on GCP
    needs: build
    runs-on: [self-hosted, gcp]
    env:
      TF_VAR_RESOURCES_DIR: ${{ secrets.TF_VAR_RESOURCES_DIR }}
      YB_CUSTOMER_PASSWORD: ${{ secrets.YB_CUSTOMER_PASSWORD }}
      GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      GOOGLE_PROJECT: ${{ secrets.GOOGLE_PROJECT }}
      GOOGLE_REGION: ${{ secrets.GOOGLE_REGION }}
      GOOGLE_ZONE: ${{ secrets.GOOGLE_ZONE }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        terraform:
          # add other versions to support
          - '1.1.*'

    steps:
      - name: Set up Go
        uses: actions/setup-go@v2.1.3
        with:
          go-version: '1.18'
        id: go

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Get dependencies
        run: |
          go mod download

      - name: Make terraform provider installation directory
        run: mkdir -p ./acctest/gcp/terraform.d/plugins/terraform.yugabyte.com/platform/yugabyte-platform/0.1.0/linux_amd64

      - name: Install
        run: |
          go build -o ./acctest/gcp/terraform.d/plugins/terraform.yugabyte.com/platform/yugabyte-platform/0.1.0/linux_amd64

      # use the modules to bring up platform instance for acceptance tests
      - name: Terraform Init
        run: |
          export TF_VAR_RESOURCES_DIR=$TF_VAR_RESOURCES_DIR
          export YB_CUSTOMER_PASSWORD=$YB_CUSTOMER_PASSWORD
          export GOOGLE_APPLICATION_CREDENTIALS=$secrets.GOOGLE_CREDENTIALS
          export GOOGLE_PROJECT=$GOOGLE_PROJECT
          export GOOGLE_REGION=$GOOGLE_REGION
          export GOOGLE_ZONE=$GOOGLE_ZONE
          terraform init
        working-directory: ./acctest/gcp

      - name: Terraform Plan
        run: terraform plan -no-color
        working-directory: ./acctest/gcp

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./acctest/gcp

      - name: Set platform host
        run: echo "YB_HOST=$(terraform output --raw host)" >> $GITHUB_ENV
        working-directory: ./acctest/gcp

      - name: Set platform api key
        run: echo "YB_API_KEY=$(terraform output --raw api_key)" >> $GITHUB_ENV
        working-directory: ./acctest/gcp
      # run acceptance tests
      - name: TF acceptance tests
        timeout-minutes: 120
        env:
          TF_ACC: "1"

        run: |
          go test -v -cover -timeout 2h ./... -run "GCP"

      # clean up platform instance
      - name: Terraform Destroy
        if: always()
        run: terraform destroy -auto-approve
        working-directory: ./acctest/gcp